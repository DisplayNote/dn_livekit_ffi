parameters:
  - name: stageName
    type: string
  - name: jobName
    type: string
  - name: os
    type: string
  - name: buildScript
    type: string
  - name: envVars
    type: object
    default: {}
  - name: target
    type: string
  - name: platform
    type: string
  - name: name
    type: string
  - name: dylib
    type: string
  - name: jar
    type: string
  - name: pool_name
    type: string
  - name: artifact
    type: string

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: [build_webrtc]
  jobs:
  - job: ${{ parameters.jobName }}
    pool:
      name: ${{ parameters.pool_name }}
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download WebRtc
      inputs:
        buildType: 'current'
        artifactName: ${{ parameters.artifact }}
        downloadPath: '$(Pipeline.Workspace)/webrtc-builds'

    - task: Bash@3
      displayName: 'Check file artifact'
      inputs:
        targetType: 'inline'
        script: |
          ls -l $(Pipeline.Workspace)/webrtc-builds
          ls -l $(Pipeline.Workspace)/webrtc-builds/${{ parameters.artifact }}

    - template: 'use-rust.yml'
      parameters:
        rustup_toolchain: stable
        rustup_target: ${{ parameters.target }}

    - task: Bash@3
      displayName: 'Set environment variables'
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=CARGO_TERM_COLOR]always"
          if [ "${AGENT_OS}" == "Windows_NT" ]; then
              echo "##vso[task.setvariable variable=cargo_home]%USERPROFILE%/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]%USERPROFILE%/.rustup"
          else
              echo "##vso[task.setvariable variable=cargo_home]$HOME/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]$HOME/.rustup"
          fi

    - script: ${{ parameters.buildScript }}
      displayName: 'Build on ${{ parameters.stageName }}'
      env:
        LK_ARTIFACT_WEBRTC: '$(Pipeline.Workspace)/webrtc-builds/${{ parameters.artifact }}'

    - task: Bash@3
      displayName: 'Copy/Build licenses'
      inputs:
        targetType: 'inline'
        script: |
          echo "# livekit" > TEMP_LICENSE.md
          echo "```
          cat LICENSE >> TEMP_LICENSE.md
          echo "```"
          cat livekit-ffi/WEBRTC_LICENSE.md >> TEMP_LICENSE.md
          mkdir -p target/${{ parameters.target }}/release
          mv TEMP_LICENSE.md target/${{ parameters.target }}/release/LICENSE.md

    - task: Bash@3
      displayName: 'Zip artifact (Unix for Android)'
      condition: and(succeeded(),  eq('${{ parameters.platform }}', 'android'))
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p target/${{ parameters.target }}/release
          cp livekit-ffi/include/livekit_ffi.h target/${{ parameters.target }}/release/
          cd target/${{ parameters.target }}/release/
          zip $(Build.ArtifactStagingDirectory)/${{ parameters.name }}.zip ${{ parameters.dylib }} ${{ parameters.jar }} livekit_ffi.h LICENSE.md

    - task: PowerShell@2
      displayName: 'Zip artifact (Windows)'
      condition: and(succeeded(), eq('${{ parameters.os }}', 'windows-latest'))
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p target/${{ parameters.target }}/release
          cp livekit-ffi/include/livekit_ffi.h target/${{ parameters.target }}/release/
          cd target/${{ parameters.target }}/release/
          Get-ChildItem -Path ${{ parameters.dylib }}, livekit_ffi.h, LICENSE.md | Compress-Archive -DestinationPath $(Build.ArtifactStagingDirectory)/${{ parameters.name }}.zip

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/'
        artifactName: ${{ parameters.name }}
      displayName: 'Artifact | Publish'

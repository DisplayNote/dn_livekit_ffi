parameters:
  - name: stageName
    type: string
  - name: jobName
    type: string
  - name: os
    type: string
  - name: buildScript
    type: string
  - name: envVars
    type: object
    default: {}
  - name: target
    type: string
  - name: platform
    type: string
  - name: name
    type: string
  - name: dylib
    type: string
  - name: jar
    type: string
  - name: pool_name
    type: string
  - name: artifact
    type: string
  - name: dependency
    type: string
  - name: arch
    type: string

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: ${{ parameters.dependency }}
  jobs:
  - job: ${{ parameters.jobName }}
    pool:
      name: ${{ parameters.pool_name }}
    steps:

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: ${{ parameters.artifact }}
        targetPath: '$(Pipeline.Workspace)/webrtc-output'
      displayName: 'DOWNLOAD | Download artifact'

    - template: 'use-rust.yml'
      parameters:
        rustup_toolchain: stable
        rustup_target: ${{ parameters.target }}

    - task: Bash@3
      displayName: 'Set environment variables'
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=CARGO_TERM_COLOR]always"
          if [ "${AGENT_OS}" == "Windows_NT" ]; then
              echo "##vso[task.setvariable variable=cargo_home]%USERPROFILE%/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]%USERPROFILE%/.rustup"
              echo "##vso[task.prependpath]%USERPROFILE%\.cargo\bin"
          else
              echo "##vso[task.setvariable variable=cargo_home]$HOME/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]$HOME/.rustup"
          fi

    - script: ${{ parameters.buildScript }}
      displayName: 'Build on ${{ parameters.stageName }}'
      env:
        LK_CUSTOM_WEBRTC: '$(Pipeline.Workspace)/webrtc-output'

    - task: Bash@3
      displayName: 'Copy/Build licenses'
      inputs:
        targetType: 'inline'
        script: |
          echo "# livekit" > TEMP_LICENSE.md
          echo "```
          cat LICENSE >> TEMP_LICENSE.md
          echo "```"
          cat livekit-ffi/WEBRTC_LICENSE.md >> TEMP_LICENSE.md
          mkdir -p target/${{ parameters.target }}/release
          mv TEMP_LICENSE.md target/${{ parameters.target }}/release/LICENSE.md

    - task: Bash@3
      displayName: 'Prepare conan package (Unix for Android)'
      condition: and(succeeded(),  eq('${{ parameters.platform }}', 'android'))
      inputs:
        targetType: 'inline'
        script: |
          cd target/${{ parameters.target }}/release/
          mkdir -p $(Pipeline.Workspace)/${{ parameters.name }}/lib/android/${{ parameters.arch }}
          cp ${{ parameters.dylib }} ${{ parameters.jar }} $(Pipeline.Workspace)/${{ parameters.name }}/lib/android/${{ parameters.arch }}

    - task: PowerShell@2
      displayName: 'Zip artifact (Windows)'
      condition: and(succeeded(), eq('${{ parameters.os }}', 'windows-latest'))
      inputs:
        targetType: 'inline'
        script: |
          Set-Location "target/${{ parameters.target }}/release/"
          $null = New-Item -ItemType Directory -Path "$(Pipeline.Workspace)/${{ parameters.name }}/lib/windows" -Force
          Copy-Item -Path @("${{ parameters.dylib }}", "${{ parameters.jar }}") -Destination "$(Pipeline.Workspace)/${{ parameters.name }}/lib/windows"

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Pipeline.Workspace)/${{ parameters.name }}/'
        contents: '**'
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy results'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: ${{ parameters.name }}
        publishLocation: 'pipeline'
      displayName: 'PUBLISH | Publish results'

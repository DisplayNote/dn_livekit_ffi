parameters:
  - name: stageName
    type: string
  - name: jobName
    type: string
  - name: os
    type: string
  - name: buildScript
    type: string
  - name: envVars
    type: object
    default: {}
  - name: target
    type: string
  - name: platform
    type: string
  - name: name
    type: string
  - name: dylib
    type: string
  - name: jar
    type: string
  - name: pool_name
    type: string
  - name: artifact
    type: string
  - name: dependency
    type: string
  - name: arch
    type: string

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: ${{ parameters.dependency }}
  jobs:
  - job: ${{ parameters.jobName }}
    pool:
      name: ${{ parameters.pool_name }}
    steps:
    - template: 'use-rust.yml'
      parameters:
        rustup_toolchain: stable
        rustup_target: ${{ parameters.target }}

    - task: Bash@3
      displayName: 'Set environment variables'
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=CARGO_TERM_COLOR]always"
          if [ "${AGENT_OS}" == "Windows_NT" ]; then
              echo "##vso[task.setvariable variable=cargo_home]%USERPROFILE%/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]%USERPROFILE%/.rustup"
          else
              echo "##vso[task.setvariable variable=cargo_home]$HOME/.cargo"
              echo "##vso[task.setvariable variable=rustup_home]$HOME/.rustup"
          fi

    - script: ${{ parameters.buildScript }}
      displayName: 'Build on ${{ parameters.stageName }}'
      env:
        LK_CUSTOM_WEBRTC: '$(Pipeline.Workspace)/webrtc-builds/'

    - task: Bash@3
      displayName: 'Copy/Build licenses'
      inputs:
        targetType: 'inline'
        script: |
          echo "# livekit" > TEMP_LICENSE.md
          echo "```
          cat LICENSE >> TEMP_LICENSE.md
          echo "```"
          cat livekit-ffi/WEBRTC_LICENSE.md >> TEMP_LICENSE.md
          mkdir -p target/${{ parameters.target }}/release
          mv TEMP_LICENSE.md target/${{ parameters.target }}/release/LICENSE.md

    - template: prepare-conan-profile.yml
      parameters:
        platform: ${{ parameters.platform }}
        os: ${{ parameters.os }}
        target: ${{ parameters.target }}
        artifact: ${{ parameters.artifact }}
        arch: ${{ parameters.arch }}
        dylib: ${{ parameters.dylib }}
        jar: ${{ parameters.jar }}
        name: ${{ parameters.name }}

